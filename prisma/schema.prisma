// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  u_id            Int                                                     @id @default(autoincrement())
  u_document_no   String                                                  @unique
  u_email         String                                                  @unique
  u_name          String
  u_position      Positions?
  u_division      Departments?
  u_salary_gross  Float?
  u_address_line1 String?
  u_address_line2 String?
  u_city          String?
  u_province      String?
  u_postal_code   String?
  u_password      String?
  u_created_at    DateTime                                                 @default(now())
  u_updated_at    DateTime?                                                @updatedAt      
  u_is_hr         Boolean                                                  @default(false)
  u_is_deleted    Boolean                                                  @default(false)
  Leave_Request_By_User      leave[]                                       @relation("LeaveRequestByUser")
  Leave_Approved_By_User     leave[]                                       @relation("LeaveApprovedByUser")
  Attendance                   attendance[]                                 
}

//ENUM
enum Positions {
  EMPLOYEE
  MANAGER
  DEPT_HEAD
}

//ENUM
enum Departments {
  HR
  RND
  IT
  OPERATIONS
  ACCOUNTING
}

model attendance {
  a_id          Int         @id @default(autoincrement())
  a_document_no String      @unique
  a_year        Int       
  a_month       Int
  a_date        Int
  a_tap_in      DateTime?   
  a_tap_out     DateTime?
  a_image_url   String?
  a_u_id        Int
  user          user        @relation(fields: [a_u_id], references: [u_id], onDelete: Cascade, onUpdate: Cascade)
  @@unique([a_u_id, a_year, a_month, a_date])
}

model leave {
  l_id                        Int       @id @default(autoincrement())
  l_document_no               String?   @unique
  l_employee_id               Int       
  l_supervisor_id             Int?
  l_type                      Type_Of_Leave
  l_duration                  Int
  l_start_date                Int
  l_start_month               Int
  l_start_year                Int
  l_is_approved               Boolean
  l_created_at                DateTime  @default(now())
  l_updated_at                DateTime  @updatedAt
  leave_request_by_user       user      @relation(name: "LeaveRequestByUser", fields: [l_employee_id], references: [u_id], onDelete: Cascade, onUpdate: Cascade)
  leave_approved_by_user      user?     @relation(name: "LeaveApprovedByUser", fields: [l_supervisor_id], references: [u_id], onDelete: SetNull, onUpdate: Cascade)

}

//ENUM
enum Type_Of_Leave {
  PAID
  SICK
  MATERNITY
  UNPAID
}


